package de.proglabor.aufgabe5;

import java.io.File;
import java.io.IOException;
import java.net.URL;
import java.util.Optional;
import java.util.ResourceBundle;
import java.util.Timer;
import java.util.TimerTask;
import javafx.application.Platform;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.Group;
import javafx.scene.Scene;
import javafx.scene.canvas.Canvas;
import javafx.scene.canvas.GraphicsContext;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;
import javafx.scene.control.ButtonType;
import javafx.scene.control.ToggleButton;
import javafx.scene.control.Alert.AlertType;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.StackPane;
import javafx.scene.media.Media;
import javafx.scene.media.MediaPlayer;
import javafx.stage.Stage;
import javafx.util.Duration;

public class Controller implements Initializable {
	private int speed = 250;
	private TimerTask task;
	private boolean isPaused = false;
	private HighScoreList scoresList;
	private String uriString = new File("D:\\eclipse-workspace\\Prog-Aufgabe3\\tetris.mp3").toURI().toString();
	private MediaPlayer player = new MediaPlayer(new Media(uriString));
	private Tetris t;
	private Stage primaryStage;
	private DrawGame gameDraw;
	private Scene scene;
	private Group root;
	private Timer fallDefaut;

	public Controller(Stage primaryStage, Tetris t, Scene scene, Group root) {
		this.t = t;
		this.primaryStage = primaryStage;
		this.scene = scene;
		this.root = root;
	}

//
	@FXML
	private GridPane grid;
	@FXML
	private Button play;

	@FXML
	protected void playGame() {
		img.setVisible(true);
		img.toBack();
		stack.setVisible(false);
		gif.setVisible(false);
//		openScene.setBlendMode(BlendMode.MULTIPLY);
//		openScene.toBack();
		grid.setVisible(true);
		primaryStage.sizeToScene();
		gc = img.getGraphicsContext2D();
		try {
			scoresList = new HighScoreList("textHighScore.csv");
		} catch (IOException e) {
			e.printStackTrace();
		}
		gameDraw = new DrawGame(t, scoresList, gc);
		// timer
		Timer fall = new Timer();
		fallDefaut = fall;
		task = new TimeLine(t, root, fallDefaut, scoresList, gameDraw);
		fallDefaut.schedule(task, 0, speed);
		// key reader
		scene.setOnKeyPressed(new KeyReader(gameDraw, t, isPaused, task, fallDefaut, root, scoresList, speed));
	}

	@FXML
	private ImageView gif;
	@FXML
	private StackPane stack;
	/*
	 * Exit Button
	 */
	@FXML
	private Button exit;

	@FXML
	protected void handleExitButtonAction(ActionEvent event) {
		System.exit(0);
	}

	/*
	 * Reset Button
	 */
	@FXML
	private Button reset;

	@FXML
	protected void handleResetButtonAction(ActionEvent event) {
		fallDefaut.cancel();
		player.stop();
		primaryStage.close();
		Platform.runLater(() -> new GUI().start(new Stage()));
	}

	/*
	 * Save Button
	 */
	@FXML
	private Button save;

	@FXML
	protected void handleSaveButtonAction(ActionEvent event) {
		t.saveGame();
		fallDefaut.cancel();
		Alert alert = new Alert(AlertType.INFORMATION);
		alert.setTitle("Successful Save!");
		alert.setHeaderText("Successful saved your game!");
		String s = t.getScore() + " is your score!";
		alert.setContentText(s);
		Optional<ButtonType> result = alert.showAndWait();
		if (result.get() == ButtonType.OK) {
			primaryStage.close();
			Platform.runLater(() -> new GUI().start(new Stage()));
		}
	}

	/*
	 * Resume Button
	 */
	@FXML
	private Button resume;

	@FXML
	protected void handleResumeButtonAction(ActionEvent event) {
		try {
			t.loadGame();
		} catch (IOException e) {
			e.printStackTrace();
		}
		playGame();
	}

	/*
	 * HighScore Button
	 */
	@FXML
	private Button high;

	@FXML
	protected void handleHighButtonAction(ActionEvent event) {
		t.setGameOver(true);

	}

	/*
	 * Mute Button
	 */
	@FXML
	private ToggleButton mute;

	@FXML
	protected void loadTB(ActionEvent event) {
		ToggleButton btnMute = (ToggleButton) event.getSource();
		Image iconOff = new Image(getClass().getResourceAsStream("/muteUn.PNG"), 100, 100, false, false);
		Image iconOn = new Image(getClass().getResourceAsStream("/mute.jpg"), 100, 100, false, false);
		ImageView viewOn = new ImageView(iconOn);
		ImageView viewOff = new ImageView(iconOff);
		if (btnMute.isSelected()) {
			btnMute.setGraphic(viewOff);
			player.setMute(true);
		} else {
			btnMute.setGraphic(viewOn);
			player.setMute(false);
		}
	}

	/*
	 * Game play Canvas
	 */
	@FXML
	public Canvas img = new Canvas(0, 0);
	public GraphicsContext gc = img.getGraphicsContext2D();

	@Override
	public void initialize(URL location, ResourceBundle resources) {
		img.setVisible(false);
		grid.setVisible(false);
		gif.toBack();
		primaryStage.getIcons().add(new Image(getClass().getResource("/iconStage.PNG").toExternalForm()));
		player.setVolume(0.1);
		player.setOnEndOfMedia(new Runnable() {
			public void run() {
				player.seek(Duration.ZERO);
			}
		});
		player.play();
	}
}
