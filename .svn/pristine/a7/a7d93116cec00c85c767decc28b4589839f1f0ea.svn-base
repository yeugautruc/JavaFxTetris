package de.proglabor.aufgabe4;

import java.io.File;
import java.io.IOException;
import java.util.Timer;
import java.util.TimerTask;
import javafx.application.Application;
import javafx.application.Platform;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.stage.Stage;
import javafx.scene.Group;
import javafx.scene.Scene;
import javafx.scene.canvas.Canvas;
import javafx.scene.canvas.GraphicsContext;
import javafx.scene.control.Button;
import javafx.scene.media.Media;
import javafx.scene.media.MediaPlayer;
import javafx.scene.text.Font;
import javafx.scene.text.FontWeight;

public class GUI extends Application {
	// Variables
	private int XSIZE = 10;
	private int YSIZE = 20;
	private int mesh = 45;
	private int speed = 300;
	private TimerTask task;
	private boolean isPaused = false;
	public HighScoreList scoresList;
	String uriString = new File("D:\\eclipse-workspace\\Prog-Aufgabe3\\tetris.mp3").toURI().toString();
	MediaPlayer player = new MediaPlayer(new Media(uriString));

	public void setUpFrame(Group root, Stage primaryStage, Canvas canvas, Scene scene) {
		root.getChildren().add(canvas);
		GraphicsContext context = canvas.getGraphicsContext2D();
		Font newFont = Font.font("Arial", FontWeight.BOLD, 30);
		String textTitel = "TETRIS";
		String textHighScore = "High Score: ";
		context.setFont(newFont);
		context.fillText(textTitel, 85 + 20 + mesh * XSIZE, 100);
		context.fillText(
				textHighScore + "\nName: " + scoresList.getHighScoreName() + "\nTime: " + scoresList.getHighScoreTime(),
				85 + 20 + mesh * XSIZE, 240);
		context.fillText("" + scoresList.getHighScore(), 85 + 20 + mesh * XSIZE + 180, 240);
		primaryStage.setScene(scene);
		context.fillRect(20, 20, mesh * XSIZE, 2);
		context.fillRect(20, 20, 2, mesh * YSIZE);
		context.fillRect(20, 20 + mesh * YSIZE, mesh * XSIZE, 2);
		context.fillRect(20 + mesh * XSIZE, 20, 2, mesh * YSIZE);
	}

	public void setUpButton(Group root, Stage primaryStage, Tetris t) {
		// reset button
		Button btnReset = new ButtonTetris("RESET", 100, 50, 770, 890, Font.font("Arial", FontWeight.BOLD, 20),
				new EventHandler<ActionEvent>() {
					@Override
					public void handle(ActionEvent event) {
						player.stop();
						primaryStage.close();
						Platform.runLater(() -> new GUI().start(new Stage()));
					}
				});
		root.getChildren().add(btnReset);
		// exit button
		Button btnExit = new ButtonTetris("EXIT", 100, 50, 650, 890, Font.font("Arial", FontWeight.BOLD, 20),
				new EventHandler<ActionEvent>() {
					@Override
					public void handle(ActionEvent event) {
						System.exit(0);
					}
				});
		root.getChildren().add(btnExit);
		// save game button
		Button btnSaveGame = new ButtonTetris("SAVE GAME", 220, 50, 650, 820, Font.font("Arial", FontWeight.BOLD, 20),
				new EventHandler<ActionEvent>() {
					@Override
					public void handle(ActionEvent event) {
						t.saveGame();
					}
				});
		root.getChildren().add(btnSaveGame);
		// resume game button
		Button btnResumeGame = new ButtonTetris("RESUME GAME", 220, 50, 650, 750,
				Font.font("Arial", FontWeight.BOLD, 20), new EventHandler<ActionEvent>() {
					@Override
					public void handle(ActionEvent event) {
						try {
							t.loadGame();
						} catch (IOException e) {
							e.printStackTrace();
						}
					}
				});
		root.getChildren().add(btnResumeGame);
	}

	@Override
	public void start(Stage primaryStage) {
		try {
			// music player
			player.setVolume(0.05);
			player.play();
			scoresList = new HighScoreList("textHighScore.csv");
			// frame initial
			Group root = new Group();
			Scene scene = new Scene(root);
			Canvas canvas = new Canvas(900, 950);
			Tetris t = new Tetris(root);
			setUpFrame(root, primaryStage, canvas, scene);
			// timer to create loop
			Timer fall = new Timer();
			task = new TimeLine(t, root, fall, scoresList);
			fall.schedule(task, 0, speed);
			// set up button
			setUpButton(root, primaryStage, t);
			// read key from game to play game
			scene.setOnKeyPressed(new KeyBoardTetris(t, isPaused, task, fall, root, scoresList, speed));
			primaryStage.show();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public static void main(String[] args) {
		launch(args);
	}
}
